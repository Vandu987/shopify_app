{% comment %}
  Template Name: Collection - Advanced Filter
  Description: Collection page with availability filter, multiple sort options, and view toggle
{% endcomment %}

<style>
  /* Main Layout */
  .collection-container {
    display: flex;
    gap: 30px;
    margin-top: 30px;
  }

  .collection-sidebar {
    width: 250px;
    position: sticky;
    top: 20px;
    height: fit-content;
  }

  .collection-main {
    flex: 1;
  }

  /* Filter Section */
  .filter-group {
    margin-bottom: 30px;
    border-bottom: 1px solid #e1e1e1;
    padding-bottom: 20px;
  }

  .filter-group h3 {
    margin-bottom: 15px;
    font-size: 16px;
    text-transform: uppercase;
  }

  .filter-checkbox {
    display: block;
    margin-bottom: 10px;
    cursor: pointer;
  }

  .filter-checkbox input {
    margin-right: 10px;
  }

  /* Sorting and View Options */
  .collection-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-wrap: wrap;
    gap: 15px;
  }

  .sort-by {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .sort-by label {
    font-weight: 600;
  }

  .sort-by select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .view-options {
    display: flex;
    gap: 10px;
  }

  .view-btn {
    background: none;
    border: 1px solid #ddd;
    padding: 8px 12px;
    cursor: pointer;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .view-btn svg {
    width: 16px;
    height: 16px;
  }

  .view-btn.active {
    background: #000;
    color: #fff;
    border-color: #000;
  }

  /* Product Grid/List Views */
  .products-grid-view {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
  }

  .products-list-view {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .product-item {
    position: relative;
  }

  .products-list-view .product-item {
    display: flex;
    gap: 20px;
    border: 1px solid #eee;
    padding: 20px;
  }

  .products-list-view .product-image {
    width: 200px;
    flex-shrink: 0;
  }

  .product-image img {
    width: 100%;
    height: auto;
    display: block;
  }

  .product-info {
    margin-top: 10px;
  }

  .products-list-view .product-info {
    margin-top: 0;
    flex: 1;
  }

  .product-title {
    font-size: 16px;
    margin-bottom: 5px;
  }

  .product-price {
    font-weight: 600;
    color: #333;
  }

  .product-availability {
    position: absolute;
    top: 10px;
    left: 10px;
    background: #f44336;
    color: white;
    padding: 3px 8px;
    font-size: 12px;
    border-radius: 3px;
  }

  /* Sold Out Styling */
  .product-item.sold-out .product-image {
    opacity: 0.7;
  }

  .product-item.sold-out .product-availability {
    display: block;
  }

  /* Responsive */
  @media (max-width: 768px) {
    
  }
</style>

<div class="collection-container">
  <!-- Left Sidebar - Filters -->
  <div class="collection-sidebar">
    <div class="filter-group">
      <h3>Availability</h3>
      <label class="filter-checkbox">
        <input type="checkbox" name="availability" value="in-stock" {% unless current_tags contains 'out-of-stock' %}checked{% endunless %}>
        In Stock Only
      </label>
    </div>

    <!-- Add more filter groups as needed -->
    <!-- Example for other filters:
    <div class="filter-group">
      <h3>Price</h3>
      <label class="filter-checkbox">
        <input type="checkbox" name="price" value="under-50">
        Under $50
      </label>
    </div>
    -->
  </div>

  <!-- Main Content Area -->
  <div class="collection-main">
    <!-- Toolbar with Sort and View Options -->
    <div class="collection-toolbar">
      <div class="sort-by">
        <label for="sort-by">Sort by:</label>
        <select id="sort-by">
          <option value="manual" {% if collection.sort_by == 'manual' %}selected{% endif %}>Featured</option>
          <option value="best-selling" {% if collection.sort_by == 'best-selling' %}selected{% endif %}>Best Selling</option>
          <option value="title-ascending" {% if collection.sort_by == 'title-ascending' %}selected{% endif %}>A-Z</option>
          <option value="title-descending" {% if collection.sort_by == 'title-descending' %}selected{% endif %}>Z-A</option>
          <option value="price-ascending" {% if collection.sort_by == 'price-ascending' %}selected{% endif %}>Price: Low to High</option>
          <option value="price-descending" {% if collection.sort_by == 'price-descending' %}selected{% endif %}>Price: High to Low</option>
          <option value="created-ascending" {% if collection.sort_by == 'created-ascending' %}selected{% endif %}>Oldest</option>
          <option value="created-descending" {% if collection.sort_by == 'created-descending' %}selected{% endif %}>Newest</option>
        </select>
      </div>

      <div class="view-options">
        <button class="view-btn grid-view active" data-view="grid">
          <svg viewBox="0 0 24 24"><rect x="3" y="3" width="7" height="7"/><rect x="14" y="3" width="7" height="7"/><rect x="14" y="14" width="7" height="7"/><rect x="3" y="14" width="7" height="7"/></svg>
        </button>
        <button class="view-btn list-view" data-view="list">
          <svg viewBox="0 0 24 24"><rect x="3" y="3" width="18" height="2"/><rect x="3" y="7" width="18" height="2"/><rect x="3" y="11" width="18" height="2"/><rect x="3" y="15" width="18" height="2"/><rect x="3" y="19" width="18" height="2"/></svg>
        </button>
      </div>
    </div>

    <!-- Products Display -->
    <div class="products-display">
      {% paginate collection.products by 12 %}
        <div id="products-grid-view" class="products-grid-view" style="display: block;">
          {% for product in collection.products %}
            <div class="product-item {% unless product.available %}sold-out{% endunless %}">
              <a href="{{ product.url }}">
                <div class="product-image">
                  <img src="{{ product.featured_image | img_url: '400x400', crop: 'center' }}" alt="{{ product.title | escape }}">
                  {% unless product.available %}<span class="product-availability">Sold Out</span>{% endunless %}
                </div>
                <div class="product-info">
                  <h3 class="product-title">{{ product.title }}</h3>
                  <p class="product-price">{{ product.price | money }}</p>
                </div>
              </a>
            </div>
          {% endfor %}
        </div>

        <div id="products-list-view" class="products-list-view" style="display: none;">
          {% for product in collection.products %}
            <div class="product-item {% unless product.available %}sold-out{% endunless %}">
              <a href="{{ product.url }}" style="display: flex; width: 100%;">
                <div class="product-image">
                  <img src="{{ product.featured_image | img_url: '300x300', crop: 'center' }}" alt="{{ product.title | escape }}">
                  {% unless product.available %}<span class="product-availability">Sold Out</span>{% endunless %}
                </div>
                <div class="product-info">
                  <h3 class="product-title">{{ product.title }}</h3>
                  <p class="product-price">{{ product.price | money }}</p>
                  <p class="product-description">{{ product.description | strip_html | truncatewords: 30 }}</p>
                </div>
              </a>
            </div>
          {% endfor %}
        </div>

        {% if paginate.pages > 1 %}
          <div class="pagination">
            {{ paginate | default_pagination }}
          </div>
        {% endif %}
      {% endpaginate %}
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Set initial view from localStorage or default to grid
  const savedView = localStorage.getItem('productView') || 'grid';
  setView(savedView);

  // View toggle buttons
  document.querySelectorAll('.view-btn').forEach(button => {
    button.addEventListener('click', function() {
      const view = this.dataset.view;
      setView(view);
      localStorage.setItem('productView', view);
    });
  });

  function setView(view) {
    // Update active button
    document.querySelectorAll('.view-btn').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.view === view);
    });

    // Show/hide views
    document.getElementById('products-grid-view').style.display = view === 'grid' ? 'grid' : 'none';
    document.getElementById('products-list-view').style.display = view === 'list' ? 'flex' : 'none';
  }

  // Sorting functionality
  document.getElementById('sort-by').addEventListener('change', function(e) {
    const value = e.target.value;
    const url = new URL(window.location.href);
    url.searchParams.set('sort_by', value);
    window.location.href = url.toString();
  });

  // Availability filter
  document.querySelector('input[name="availability"]').addEventListener('change', function(e) {
    const url = new URL(window.location.href);
    
    if (this.checked) {
      // Remove out-of-stock tag if it exists
      url.searchParams.delete('constraint');
    } else {
      // Show all products (including out of stock)
      url.searchParams.set('constraint', 'available');
    }
    
    window.location.href = url.toString();
  });

  // For more complex filtering, you would need to either:
  // 1. Use Shopify's native filtering system with tags
  // 2. Implement AJAX filtering with a Shopify app or custom solution
});
</script>